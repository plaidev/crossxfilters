{"version":3,"file":"index.js","sources":["../node_modules/crossfilter/crossfilter.js","../node_modules/crossfilter/index.js","../src/index.mjs"],"sourcesContent":["(function(exports){\ncrossfilter.version = \"1.3.12\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n","module.exports = require(\"./crossfilter\").crossfilter;\n","import crossfilter from 'crossfilter'\n\nconst FILTER_METHODS = [\n  'filter',\n  'filterAll',\n  'filterExact',\n  'filterRange',\n  'filterFunction'\n]\n\nexport class Manager {\n  constructor() {\n    this._cf = {}\n    this._commonDimensions = {}\n    this._dimensions = {\n      default: {}\n    }\n  }\n\n  // interfaces\n\n  registerDataset(data, options={}) {\n    const {\n      dataset = 'default'\n    } = options\n    this._cf[dataset] = crossfilter(data)\n    return this._cf[dataset]\n  }\n\n  registerDimension(name, method, options={}) {\n    const {\n      dataset = 'default',\n      common = false\n    } = options\n\n    const cf = this.dataset(dataset)\n\n    if (!cf) {\n      return null\n    }\n\n    let dim = this.dimension(name, options)\n\n    if (dim) return dim\n\n    if (common) {\n      dim = this.buildCommonDimension(name, cf, method)\n      if (!this._commonDimensions[name]) this._commonDimensions[name] = {}\n      this._commonDimensions[name][dataset] = dim\n    }\n    else {\n      dim = cf.dimension(method)\n      if (!this._dimensions[dataset]) this._dimensions[dataset] = {}\n      this._dimensions[dataset][name] = dim\n    }\n\n    return dim\n  }\n\n  dataset(dataset='default') {\n    return this._cf[dataset]\n  }\n\n  dimension(name, options={}) {\n    const {\n      dataset = 'default',\n      common = false\n    } = options\n\n    if (common) {\n      if (this._commonDimensions[name]) {\n        return this._commonDimensions[name][dataset]\n      }\n    }\n    else {\n      if (this._dimensions[dataset]) {\n        return this._dimensions[dataset][name]\n      }\n    }\n    return null\n  }\n\n  filterAll() {\n    // dimension.filterAll() by each dimensions\n    Object.values(this._dimensions).forEach((ds) => {\n      Object.values(ds).forEach((dim) => {\n        dim.filterAll()\n      })\n    })\n\n    if (!Object.keys(this._commonDimensions).length) return;\n\n    Object.values(this._commonDimensions).forEach((ds) => {\n      Object.values(ds).forEach((dim) => {\n        dim._filterAll()\n      })\n    })\n  }\n\n  // inner methods\n\n  filterCommonDimensions(name, method, ...args) {\n    if (!this._commonDimensions[name]) return;\n    Object.keys(this._commonDimensions[name]).forEach((k) => {\n      const dim = this._commonDimensions[name][k]\n      const _method = `_${method}`\n      dim[_method](...args)\n    })\n    return null\n  }\n\n  buildCommonDimension(name, cf, method) {\n    const dim = cf.dimension(method)\n    const self = this\n    const proxy = new Proxy(dim, {\n      get (ins, prop) {\n        if (prop[0] === '_' && FILTER_METHODS.includes(prop.slice(1))) {\n          const _prop = prop.slice(1)\n          return (...args) => {\n            return ins[_prop](...args)\n          }\n        }\n        if (FILTER_METHODS.includes(prop)) {\n          return (...args) => self.filterCommonDimensions(name, prop, ...args)\n        }\n        if (ins[prop] instanceof Function || typeof ins[prop] === 'function') {\n          return (...args) => {\n            return ins[prop](...args)\n          }\n        }\n        return ins[prop]\n      }\n    })\n\n    return proxy\n  }\n}\n\n"],"names":["this","require$$0","FILTER_METHODS","Manager","_cf","_commonDimensions","_dimensions","data","options","dataset","crossfilter","name","method","common","cf","dim","dimension","buildCommonDimension","forEach","ds","filterAll","length","_filterAll","args","k","_method","self","proxy","Proxy","ins","prop","includes","slice","_prop","filterCommonDimensions","Function"],"mappings":"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"}