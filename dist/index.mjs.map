{"version":3,"file":"index.mjs","sources":["../node_modules/crossfilter/crossfilter.js","../node_modules/crossfilter/index.js","../src/index.mjs"],"sourcesContent":["(function(exports){\ncrossfilter.version = \"1.3.12\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n","module.exports = require(\"./crossfilter\").crossfilter;\n","import crossfilter from 'crossfilter'\n\nconst FILTER_METHODS = [\n  'filter',\n  'filterAll',\n  'filterExact',\n  'filterRange',\n  'filterFunction'\n]\n\nexport class Manager {\n  constructor() {\n    this._cf = {}\n    this._commonDimensions = {}\n    this._dimensions = {\n      default: {}\n    }\n  }\n\n  // interfaces\n\n  registerDataset(data, options={}) {\n    const {\n      dataset = 'default'\n    } = options\n    this._cf[dataset] = crossfilter(data)\n    return this._cf[dataset]\n  }\n\n  registerDimension(name, method, options={}) {\n    const {\n      dataset = 'default',\n      common = false\n    } = options\n\n    const cf = this.dataset(dataset)\n\n    if (!cf) {\n      return null\n    }\n\n    let dim = this.dimension(name, options)\n\n    if (dim) return dim\n\n    if (common) {\n      dim = this.buildCommonDimension(name, cf, method)\n      if (!this._commonDimensions[name]) this._commonDimensions[name] = {}\n      this._commonDimensions[name][dataset] = dim\n    }\n    else {\n      dim = cf.dimension(method)\n      if (!this._dimensions[dataset]) this._dimensions[dataset] = {}\n      this._dimensions[dataset][name] = dim\n    }\n\n    return dim\n  }\n\n  dataset(dataset='default') {\n    return this._cf[dataset]\n  }\n\n  dimension(name, options={}) {\n    const {\n      dataset = 'default',\n      common = false\n    } = options\n\n    if (common) {\n      if (this._commonDimensions[name]) {\n        return this._commonDimensions[name][dataset]\n      }\n    }\n    else {\n      if (this._dimensions[dataset]) {\n        return this._dimensions[dataset][name]\n      }\n    }\n    return null\n  }\n\n  filterAll() {\n    // dimension.filterAll() by each dimensions\n    Object.values(this._dimensions).forEach((ds) => {\n      Object.values(ds).forEach((dim) => {\n        dim.filterAll()\n      })\n    })\n\n    if (!Object.keys(this._commonDimensions).length) return;\n\n    Object.values(this._commonDimensions).forEach((ds) => {\n      Object.values(ds).forEach((dim) => {\n        dim._filterAll()\n      })\n    })\n  }\n\n  // inner methods\n\n  filterCommonDimensions(name, method, ...args) {\n    if (!this._commonDimensions[name]) return;\n    Object.keys(this._commonDimensions[name]).forEach((k) => {\n      const dim = this._commonDimensions[name][k]\n      const _method = `_${method}`\n      dim[_method](...args)\n    })\n    return null\n  }\n\n  buildCommonDimension(name, cf, method) {\n    const dim = cf.dimension(method)\n    const self = this\n    const proxy = new Proxy(dim, {\n      get (ins, prop) {\n        if (prop[0] === '_' && FILTER_METHODS.includes(prop.slice(1))) {\n          const _prop = prop.slice(1)\n          return (...args) => {\n            return ins[_prop](...args)\n          }\n        }\n        if (FILTER_METHODS.includes(prop)) {\n          return (...args) => self.filterCommonDimensions(name, prop, ...args)\n        }\n        if (ins[prop] instanceof Function || typeof ins[prop] === 'function') {\n          return (...args) => {\n            return ins[prop](...args)\n          }\n        }\n        return ins[prop]\n      }\n    })\n\n    return proxy\n  }\n}\n\n"],"names":["exports","version","crossfilter_identity","d","permute","array","index","i","n","length","copy","Array","bisect","crossfilter","bisect_by","by","f","bisectLeft","a","x","lo","hi","mid","bisectRight","right","left","heap","heap_by","sift","sort","t","child","heapselect","heapselect_by","k","queue","Math","min","insertionsort","insertionsort_by","j","quicksort","quicksort_by","quicksort_sizeThreshold","sixth","i1","i5","i3","i4","e1","x1","e2","i2","x2","e3","x3","e4","x4","e5","x5","pivot1","pivotValue1","pivot2","pivotValue2","less","pivotsEqual","great","ek","xk","greatValue","lessValue","crossfilter_array8","crossfilter_arrayUntyped","crossfilter_array16","crossfilter_array32","crossfilter_arrayLengthen","crossfilter_arrayLengthenUntyped","crossfilter_arrayWiden","crossfilter_arrayWidenUntyped","Uint8Array","Uint16Array","Uint32Array","constructor","set","width","Error","crossfilter_filterExact","value","values","crossfilter_filterRange","range","max","crossfilter_filterAll","crossfilter_null","crossfilter_zero","crossfilter_reduceIncrement","p","crossfilter_reduceDecrement","crossfilter_reduceAdd","v","crossfilter_reduceSubtract","add","removeData","dimension","groupAll","size","data","newData","n0","n1","concat","filters","forEach","l","newIndex","crossfilter_index","removed","push","filter","filterExact","filterRange","filterFunction","filterAll","top","bottom","group","dispose","one","m","newValues","refilter","lo0","hi0","unshift","preAdd","postAdd","M","map","crossfilter_range","bounds","lo1","hi1","refilterFunction","oldValues","oldIndex","i0","reIndex","filterIndexBounds","added","isArray","filterIndexFunction","zero","key","all","reduce","reduceCount","reduceSum","order","orderNatural","groups","groupCapacity","crossfilter_capacity","groupWidth","reduceAdd","reduceRemove","reduceInitial","update","reset","resetNeeded","arguments","oldGroups","initial","k0","groupIndex","x0","g0","g","filterListeners","indexOf","updateMany","resetMany","updateOne","resetOne","groupIncrement","oldK","seenGroups","filterOne","select","remove","valueOf","splice","indexListeners","removeDataListeners","dataListeners","reduceValue","w","this","require$$0","FILTER_METHODS","Manager","_cf","_commonDimensions","_dimensions","options","dataset","name","method","common","cf","dim","buildCommonDimension","ds","Object","keys","_filterAll","args","_method","self","proxy","Proxy","ins","prop","includes","slice","_prop","filterCommonDimensions","Function"],"mappings":"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"}